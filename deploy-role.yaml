---
#
# Deploy playbook using roles (Work In Progress)
#

# Tasks as root
- hosts: undercloud
  gather_facts: true
  vars_files:
    - vars/data.yaml
    - vars/main.yaml
    - vars/main.local.yaml
  remote_user: root
  roles:
    - role: 000-undercloud-repos
    - role: 001-undercloud-terminal-multiplexers
    - role: 002-undercloud-update-reboot
    - role: 003-undercloud-setup-stack-user
    - role: 004-undercloud-install-tripleo
    - role: 005-undercloud-setup-hostname
    - role: 006-undercloud-private-external-vlan

# Tasks as stack user
- hosts: undercloud
  gather_facts: false
  vars_files:
    - vars/data.yaml
    - vars/main.yaml
    - vars/main.local.yaml
  remote_user: stack
  roles:
    - role: 007-undercloud-install
    - role: 008-undercloud-setup-dns
    - role: 009-undercloud-import-nodes
    - role: 010-undercloud-templates-files
    - role: 011-undercloud-introspect-overcloud-nodes
      when: introspection['enabled']
    - role: 012-undercloud-setup-container-registry
      when: version >= 12
    - role: 013-undercloud-deploy-workarounds
    - role: 014-browbeat-setup
      when: deploy_browbeat
    - role: 015-browbeat-deploy-undercloud-collectd
      when:
        - deploy_browbeat
        - deploy_undercloud_collectd

# Overcloud Ready for Deployment now:
    - role: 016-overcloud-deploy
      when: deploy_overcloud
    - role: 017-browbeat-generate-overcloud-hosts
      when: deploy_browbeat
    - role: 018-browbeat-deploy-overcloud-collectd
      when:
        - deploy_browbeat
        - deploy_overcloud_collectd
    - role: 019-browbeat-deploy-grafana-dashboards
      when:
        - deploy_browbeat
        - deploy_grafana_dashboards

  post_tasks:

    - name: Disable Overcloud admin quota
      shell: ". /home/stack/overcloudrc \n
        openstack quota set --properties -1 --server-groups -1 --ram -1 --key-pairs -1 --instances -1 --fixed-ips -1 --injected-file-size -1 --server-group-members -1
        --injected-files -1 --injected-files -1 --cores -1 --injected-path-size -1 --per-volume-gigabytes -1 --gigabytes -1 --backup-gigabytes -1 --snapshots -1
        --volumes -1 --backups -1 --subnetpools -1 --vips -1 --ports -1 --subnets -1 --networks -1 --floating-ips -1 --secgroup-rules -1 --secgroups -1 --routers -1
        --rbac-policies -1 admin"
      when: disable_quota

    - name: Create Overcloud flavors
      shell: |
        . /home/stack/overcloudrc
        nova flavor-create {{item.name}} auto {{item.memory}} {{item.disk}} {{item.cpu}}
      when: create_flavors
      with_items: "{{microcloud_flavors}}"
      ignore_errors: true

    # Start Image Upload
    - name: Fetch image
      get_url:
        url: "{{microcloud_guest_images[item].url}}"
        dest: /home/stack/{{microcloud_guest_images[item].name}}.{{microcloud_guest_images[item].type}}
      with_items: "{{microcloud_guest_images}}"

    - name: Determine if image exists
      shell: |
        . /home/stack/overcloudrc
        openstack image list | grep '{{microcloud_guest_images[item].name}}'
      register: image_exists
      ignore_errors: true
      changed_when: false
      with_items: "{{microcloud_guest_images}}"

    - name: Remove image from dictionary of images if image exists
      set_fact:
        microcloud_guest_images: "{{microcloud_guest_images|dict_remove(item[0])}}"
      when: "'{{item[0]}}' in '{{item[1].stdout}}'"
      with_nested:
        - "{{microcloud_guest_images}}"
        - "{{image_exists.results}}"

    - name: Convert images to raw
      command: qemu-img convert -f {{microcloud_guest_images[item].type}} -O raw /home/stack/{{microcloud_guest_images[item].name}}.{{microcloud_guest_images[item].type}} /home/stack/{{microcloud_guest_images[item].name}}.raw
      with_items: "{{microcloud_guest_images}}"

    - name: (Non-CephStorage) Upload image into cloud
      shell: |
        . /home/stack/overcloudrc
        openstack image create --public --disk-format={{microcloud_guest_images[item].type}} --container-format=bare {{microcloud_guest_images[item].name}} < /home/stack/{{microcloud_guest_images[item].name}}.{{microcloud_guest_images[item].type}}
      ignore_errors: true
      when: deploy_browbeat and (deploy_scenario != 2 and deploy_scenario != 3)
      with_items: "{{ microcloud_guest_images }}"

    - name: (CephStorage) Upload raw image into cloud
      shell: |
        . /home/stack/overcloudrc
        openstack image create --public --disk-format=raw --container-format=bare {{microcloud_guest_images[item].name}} < /home/stack/{{microcloud_guest_images[item].name}}.raw
      ignore_errors: true
      when: deploy_browbeat and (deploy_scenario == 2 or deploy_scenario == 3)
      with_items: "{{ microcloud_guest_images }}"
    # End Image Upload

    - name: Create Overcloud security group
      shell: |
        . /home/stack/overcloudrc
        openstack security group create {{security_group_name}}
        openstack security group rule create --protocol icmp {{security_group_name}}
        openstack security group rule create --protocol tcp --dst-port 22:22 --remote-ip 0.0.0.0/0 {{security_group_name}}
      when: create_security_group

    - name: Create Overcloud keypair
      shell: |
        . /home/stack/overcloudrc
        openstack keypair create {{keypair_name}} > /home/stack/{{keypair_name}}.pem
        chmod 0600 /home/stack/{{keypair_name}}.pem
      when: create_keypair

    - name: Create private and public external networking
      shell: |
        . /home/stack/overcloudrc
        neutron net-create {{private_network_name}} --shared
        neutron subnet-create --name {{private_network_name}} {{private_network_name}} {{private_subnet}}
        neutron subnet-update {{private_network_name}} --dns-nameservers list=true {{dns_server}}
        neutron net-create {{public_network_name}} --shared --router:external --provider:network_type vlan --provider:physical_network datacentre --provider:segmentation_id {{external_vlan}}
        neutron subnet-create --disable-dhcp --gateway {{public_gateway}} --allocation-pool start={{public_allocation_start}},end={{public_allocation_end}}  browbeat_public {{public_subnet}}
        neutron router-create {{router_name}}
        neutron router-gateway-set {{router_name}} {{public_network_name}}
        neutron router-interface-add {{router_name}} {{private_network_name}}
      when: create_networks

    - name: Get private network - {{private_network_name}} UUID
      shell: |
        . /home/stack/overcloudrc
        openstack network list | grep "{{private_network_name}}" | awk '{print $2}'
      register: private_network_uuid
      when: create_networks and browbeat_workload_guests

    - name: Route external traffic from Undercloud
      become: true
      shell: |
        iptables -t nat -A POSTROUTING -o {{external_undercloud_interface}}  -j MASQUERADE
        iptables -A FORWARD -i {{external_undercloud_interface}} -o {{external_vlan_device}} -m state --state RELATED,ESTABLISHED -j ACCEPT
        iptables -A FORWARD -i {{external_vlan_device}} -o {{external_undercloud_interface}} -j ACCEPT
      when: route_external_traffic_from_undercloud

    - name: Configure Browbeat workload install vars
      replace:
        path: /home/stack/browbeat/ansible/install/group_vars/all.yml
        regexp: "{{item.regexp}}"
        replace: "{{item.replace}}"
      with_items:
        - regexp: "install_browbeat_workloads:.*"
          replace: "install_browbeat_workloads: true"
        - regexp: "pbench_internal_url:.*"
          replace: "pbench_internal_url: {{pbench_internal_url}}"
        - regexp: "browbeat_network:.*"
          replace: "browbeat_network: {{private_network_uuid.stdout}}"
      when: deploy_browbeat and browbeat_workload_guests

    - name: Install Browbeat
      shell: |
        cd /home/stack/browbeat/ansible
        { time ansible-playbook -i hosts install/browbeat.yml 2>&1 | tee -a /home/stack/log/104-browbeat-install.log ; } 2>> /home/stack/log/104-browbeat-install.log
      when: deploy_browbeat

    - name: Browbeat collect metadata
      shell: |
        cd /home/stack/browbeat/ansible
        { time ansible-playbook -i hosts gather/site.yml 2>&1 | tee -a /home/stack/log/105-browbeat-gather.log ; } 2>> /home/stack/log/105-browbeat-gather.log
      when: deploy_browbeat and browbeat_collect_metadata

    - name: Adjust nova allocation ratios
      shell: |
        cd /home/stack/browbeat/ansible
        { time ansible-playbook -i hosts browbeat/adjust-nova-allocation.yml -e "cpu_allocation_ratio={{adjust_nova_allocation['cpu_allocation_ratio']}} ram_allocation_ratio={{adjust_nova_allocation['ram_allocation_ratio']}} disk_allocation_ratio={{adjust_nova_allocation['disk_allocation_ratio']}} restart_nova=true" 2>&1 | tee -a /home/stack/log/201-adjust-nova-allocation.log ; } 2>> /home/stack/log/201-adjust-nova-allocation.log
      when: deploy_browbeat and adjust_nova_allocation['enabled']

    - name: Update Microcode
      shell: |
        cd /home/stack/browbeat/ansible
        { time ansible-playbook -i hosts browbeat/adjust-microcode.yml -e 'get_url_base={{microcode_url}}' 2>&1 | tee -a /home/stack/log/202-microcode-update.log ; } 2>> /home/stack/log/202-microcode-update.log
      when: deploy_browbeat and update_microcode

    - name: Adjust Security
      shell: |
        cd /home/stack/browbeat/ansible
        { time ansible-playbook -i hosts browbeat/adjust-security.yml -e 'security={{adjust_security['security']}}' 2>&1 | tee -a /home/stack/log/203-security-update.log ; } 2>> /home/stack/log/203-security-update.log
      when: deploy_browbeat and adjust_security['enabled']

    # Reorganize/refactor Playbook:
    # * (WIP) Split into roles
    # * Deploy from scratch playbook
    # * Rebuild overcloud playbook (Using any overcloud deployment scenario)
    # Healthcheck
    #  * Get Token
    #  * Add Network
    #  * Boot Instance
    #  * Ping Instance
    #  * Delete Instance, Network
    # Run Browbeat
    # Bugs/Thoughts
    # * Capture Memory usage?
    # * Auto install: sysstat, strace
    # * Fail if containers are not pulled down (missing containers)
    # * Artifacting:
    #    * /home/stack/log/*
    #    * /home/stack/browbeat/results/*
    #    * /home/stack/browbeat/metadata/*
    #    * Local deploy microcloud timings (Ansible timings)
