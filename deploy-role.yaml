---
#
# Deploy playbook using roles (Work In Progress)
#

# Tasks as root
- hosts: undercloud
  gather_facts: true
  vars_files:
    - vars/data.yaml
    - vars/main.yaml
    - vars/main.local.yaml
  remote_user: root
  roles:
    - role: 000-undercloud-repos
    - role: 001-undercloud-terminal-multiplexers
    - role: 002-undercloud-update-reboot
    - role: 003-undercloud-setup-stack-user
    - role: 004-undercloud-install-tripleo
    - role: 005-undercloud-setup-hostname
    - role: 006-undercloud-private-external-vlan

- hosts: undercloud
  gather_facts: false
  vars_files:
    - vars/data.yaml
    - vars/main.yaml
    - vars/main.local.yaml
  remote_user: stack
  tasks:
    - name: Install undercloud
      shell: "{ time openstack undercloud install  2>&1 | tee -a /home/stack/log/001-install-undercloud.log ; } 2>> /home/stack/log/001-install-undercloud.log"

    - name: Install ipa and overcloud images
      become: true
      yum:
        name: "{{item}}"
      with_items:
        - rhosp-director-images
        - rhosp-director-images-ipa

    - name: Untar ipa and overcloud images
      command: tar -xvf {{item}}  -C /home/stack/images
      with_items:
        - /usr/share/rhosp-director-images/overcloud-full-latest-{{version}}.0.tar
        - /usr/share/rhosp-director-images/ironic-python-agent-latest-{{version}}.0.tar

    - name: Upload overcloud images
      shell: |
        . /home/stack/stackrc
        { time openstack overcloud image upload --image-path /home/stack/images/ 2>&1 | tee -a /home/stack/log/002-upload-images.log ; } 2>> /home/stack/log/002-upload-images.log

    - name: Get neutron subnet uuid
      shell: |
        . /home/stack/stackrc
        neutron subnet-list | grep start | awk '{print $2}'
      register: neutron_subnet_uuid

    - name: Setup DNS on Undercloud Neutron subnet
      shell: |
        . /home/stack/stackrc
        neutron subnet-update {{neutron_subnet_uuid.stdout}} --dns-nameserver {{dns_server}}

    # Import Nodes
    - name: Get instackenv.json
      get_url:
        url: "{{instackenv_json}}"
        dest: /home/stack/instackenv.json
        owner: stack
        group: stack

    - name: Check if credentials in instackenv.json are correct
      shell: openstack baremetal instackenv validate  -f  /home/stack/instackenv.json
      register: node_status
      failed_when: "'SUCCESS' not in node_status.stdout"

    - name: Import instackenv.json
      shell: |
        . /home/stack/stackrc
        { time openstack baremetal import --json /home/stack/instackenv.json 2>&1 | tee -a /home/stack/log/003-import-instackenv.log ; } 2>> /home/stack/log/003-import-instackenv.log

    - name: Configure boot
      shell: |
        . /home/stack/stackrc
        { time openstack baremetal configure boot 2>&1 | tee -a /home/stack/log/004-configure-boot.log ; } 2>> /home/stack/log/004-configure-boot.log
    # End Importing and configuring Nodes

    # Introspect Nodes
    - name: Template introspection with retry script
      template:
        src: templates/introspect.sh.j2
        dest: /home/stack/introspect.sh

    - name: Run Bulk introspection
      shell:  |
        . /home/stack/stackrc
        { time openstack baremetal introspection bulk start 2>&1 | tee -a /home/stack/log/005-bulk-introspection.log ; } 2>> /home/stack/log/005-bulk-introspection.log
      when: introspection['enabled'] and introspection['bulk_introspection']

    - name: Run introspection with retry script
      shell: bash /home/stack/introspect.sh
      when: introspection['enabled'] and not introspection['bulk_introspection']

    - name: Generate node-data
      shell: |
        . /home/stack/stackrc
        mkdir ~/node-data
        for i in `ironic node-list | grep avail | awk '{print $2}'`; do openstack baremetal introspection data save $i > node-data/$i; done
      when: introspection['enabled']
    # End Introspecting Nodes

    # Pin Nodes:
    # Actual Node pinning occurs in the deploy script
    - name: Copy pin.py to Undercloud
      copy:
        src: files/pin.py
        dest: /home/stack/pin.py
        owner: stack
        group: stack
        mode: 0744

    - name: Copy node pinning definitions to Undercloud
      copy:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
      with_items: "{{deploy_node_pinning_yamls}}"
    # End Pin Nodes

    - name: Copy original network configuration files
      shell: cp -r /usr/share/openstack-tripleo-heat-templates/network/config/single-nic-vlans /home/stack/templates/nic-configs

    - name: Copy original roles_data.yaml into /home/stack/templates
      shell: cp /usr/share/openstack-tripleo-heat-templates/roles_data.yaml /home/stack/templates/roles_data.yaml

    - name: Copy roles_data.yaml to roles_data.objectstorage.yaml
      shell: cp /home/stack/templates/roles_data.yaml /home/stack/templates/roles_data.objectstorage.yaml

    - name: Modify roles_data.objectstorage.yaml
      replace:
        path: /home/stack/templates/roles_data.objectstorage.yaml
        regexp: "    - OS::TripleO::Services::SwiftStorage"
        replace: "#    - OS::TripleO::Services::SwiftStorage"
        before: "- name: Compute"

    - name: Copy over static Tripleo Heat Template configuration files
      copy:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
        owner: stack
        group: stack
      with_items: "{{deploy_static_tripleo_heat_templates}}"

    - name: Template out Tripleo Heat Templates and other Scripts/Files
      template:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
        owner: stack
        group: stack
      with_items: "{{deploy_templated_tripleo_heat_templates}}"

    - name: Place version metadata json file in /home/stack
      become: true
      template:
        src: "templates/version.json.j2"
        dest: "{{version_directory}}/version.json"
        owner: stack
        group: stack

    # Setup Container Registry - Pike (OSP12)
    - name: Append additional insecure registry to /etc/sysconfig/docker
      become: true
      lineinfile:
        path: /etc/sysconfig/docker
        state: present
        regexp: '^INSECURE_REGISTRY='
        line: 'INSECURE_REGISTRY="--insecure-registry 192.168.24.1:8787 --insecure-registry 192.168.24.3:8787 --insecure-registry {{additional_insecure_registry}}"'
      when: version >= 12

    - name: Restart Docker registry
      become: true
      service:
        name: docker
        state: restarted
      when: version >= 12

    - name: Create template to pull images to local registry
      shell: |
        . /home/stack/stackrc;
        openstack overcloud container image prepare --namespace {{container_namespace}} --tag {{containers_tag}} --pull-source {{additional_insecure_registry}} --prefix openstack --push-destination 192.168.24.1:8787 --images-file overcloud_containers.yaml
      when: version >= 12

    # (akrzos) I could not get this command to respond without:
    # "Error while fetching server API version: ('Connection aborted.', error(13, 'Permission denied'))"
    # In order to work around this I used Ansible's "become: true" which I am unsure if it will be a
    # long term solution
    - name: Pull images using the container_images.yaml
      shell: |
        . /home/stack/stackrc;
        { time openstack overcloud container image upload --config-file overcloud_containers.yaml 2>&1 | tee -a /home/stack/log/006-container-image-upload.log ; } 2>> /home/stack/log/006-container-image-upload.log
      become: true
      register: pull_images
      until: pull_images.rc == 0
      retries: 2
      delay: 10
      when: version >= 12

    - name: Create template for using images from local registry
      shell: |
        . /home/stack/stackrc;
        openstack overcloud container image prepare --tag {{containers_tag}} --namespace 192.168.24.1:8787/{{container_namespace}} --prefix openstack --env-file ~/docker_registry.yaml -r ~/templates/roles_data.yaml
      when: version >= 12
    # End Setup Container Registry

    # Undercloud ready for deployment at this point
    # Apply deployment workarounds:
    - name: Pike - Apply ObjectStorage THT fix
      shell: find  /usr/share/openstack-tripleo-heat-templates/ -type f -exec sed -i 's/OS::TripleO::SwiftStorage/OS::TripleO::ObjectStorage/g' {} \;
      become: true
      when:
        - version >= 12
        - pike_objectstorage_deploy_workaround
    # End workarounds

    - name: Clone browbeat on undercloud
      git:
        repo: https://github.com/openstack/browbeat.git
        dest: /home/stack/browbeat
        version: master
      when: deploy_browbeat

    - name: Copy version.json into metadata directory
      copy:
        src: /etc/version.json
        dest: /home/stack/browbeat/metadata/version.json
        remote_src: true
      when: deploy_browbeat

    - name: Configure Browbeat install vars
      replace:
        path: /home/stack/browbeat/ansible/install/group_vars/all.yml
        regexp: "{{item.regexp}}"
        replace: "{{item.replace}}"
      with_items: "{{browbeat_vars}}"
      when: deploy_browbeat

    - name: Configure Browbeat install vars for CephStorage Nodes
      replace:
        path: /home/stack/browbeat/ansible/install/group_vars/all.yml
        regexp: "{{item.regexp}}"
        replace: "{{item.replace}}"
      with_items: "{{browbeat_cephstorage_vars}}"
      when: deploy_browbeat and (deploy_scenario == 2 or deploy_scenario == 3)

    - name: Configure Browbeat install vars for Non-CephStorage Deployments
      replace:
        path: /home/stack/browbeat/ansible/install/group_vars/all.yml
        regexp: "{{item.regexp}}"
        replace: "{{item.replace}}"
      with_items: "{{browbeat_objectstorage_vars}}"
      when: deploy_browbeat and (deploy_scenario != 2 and deploy_scenario != 3)

    # Collectd on Undercloud
    - name: Generate hosts and ssh-config on Undercloud for Browbeat (Pre-Deployment)
      shell: |
        cd /home/stack/browbeat/ansible
        . /home/stack/stackrc
        /home/stack/browbeat/ansible/generate_tripleo_hostfile.sh -l
      when: deploy_browbeat and deploy_undercloud_collectd

    - name: Deploy collectd on Undercloud
      shell: |
        cd /home/stack/browbeat/ansible
        { time ansible-playbook -i hosts install/collectd-openstack.yml --tag undercloud 2>&1 | tee -a /home/stack/log/101-collectd-undercloud-install.log ; } 2>> /home/stack/log/101-collectd-undercloud-install.log
      when: deploy_browbeat and deploy_undercloud_collectd
    # End collectd on Undercloud

    - name: Setup "install" tmux
      become: true
      shell: "{{tmux_install_shell}}"

    - name: "Deploy Overcloud Scenario: {{deploy_scenario_human[deploy_scenario]}}"
      shell: . /home/stack/stackrc; bash /home/stack/deploy{{deploy_scenario}}.sh
      when: deploy_overcloud

    - name: Generate hosts and ssh-config on Undercloud for Browbeat (Post-Deployment)
      shell: |
        cd /home/stack/browbeat/ansible
        . /home/stack/stackrc
        /home/stack/browbeat/ansible/generate_tripleo_hostfile.sh -l
      when: deploy_browbeat

    - name: Deploy Grafana Dashboards
      shell: |
        cd /home/stack/browbeat/ansible
        { time ansible-playbook -i hosts install/grafana-dashboards.yml -e 'upload_general=false upload_static=false' 2>&1 | tee -a /home/stack/log/102-grafana-dashboards.log ; } 2>> /home/stack/log/102-grafana-dashboards.log
      when: deploy_browbeat and deploy_grafana_dashboards

    - name: Deploy collectd on Overcloud
      shell: |
        cd /home/stack/browbeat/ansible
        { time ansible-playbook -i hosts install/collectd-openstack.yml --forks 10 --tag controller,cephstorage,objectstorage,blockstorage,compute 2>&1 | tee -a /home/stack/log/103-collectd-overcloud-install.log ; } 2>> /home/stack/log/103-collectd-overcloud-install.log
      when: deploy_browbeat and deploy_overcloud_collectd

    - name: Disable Overcloud admin quota
      shell: ". /home/stack/overcloudrc \n
        openstack quota set --properties -1 --server-groups -1 --ram -1 --key-pairs -1 --instances -1 --fixed-ips -1 --injected-file-size -1 --server-group-members -1
        --injected-files -1 --injected-files -1 --cores -1 --injected-path-size -1 --per-volume-gigabytes -1 --gigabytes -1 --backup-gigabytes -1 --snapshots -1
        --volumes -1 --backups -1 --subnetpools -1 --vips -1 --ports -1 --subnets -1 --networks -1 --floating-ips -1 --secgroup-rules -1 --secgroups -1 --routers -1
        --rbac-policies -1 admin"
      when: disable_quota

    - name: Create Overcloud flavors
      shell: |
        . /home/stack/overcloudrc
        nova flavor-create {{item.name}} auto {{item.memory}} {{item.disk}} {{item.cpu}}
      when: create_flavors
      with_items: "{{microcloud_flavors}}"
      ignore_errors: true

    # Start Image Upload
    - name: Fetch image
      get_url:
        url: "{{microcloud_guest_images[item].url}}"
        dest: /home/stack/{{microcloud_guest_images[item].name}}.{{microcloud_guest_images[item].type}}
      with_items: "{{microcloud_guest_images}}"

    - name: Determine if image exists
      shell: |
        . /home/stack/overcloudrc
        openstack image list | grep '{{microcloud_guest_images[item].name}}'
      register: image_exists
      ignore_errors: true
      changed_when: false
      with_items: "{{microcloud_guest_images}}"

    - name: Remove image from dictionary of images if image exists
      set_fact:
        microcloud_guest_images: "{{microcloud_guest_images|dict_remove(item[0])}}"
      when: "'{{item[0]}}' in '{{item[1].stdout}}'"
      with_nested:
        - "{{microcloud_guest_images}}"
        - "{{image_exists.results}}"

    - name: Convert images to raw
      command: qemu-img convert -f {{microcloud_guest_images[item].type}} -O raw /home/stack/{{microcloud_guest_images[item].name}}.{{microcloud_guest_images[item].type}} /home/stack/{{microcloud_guest_images[item].name}}.raw
      with_items: "{{microcloud_guest_images}}"

    - name: (Non-CephStorage) Upload image into cloud
      shell: |
        . /home/stack/overcloudrc
        openstack image create --public --disk-format={{microcloud_guest_images[item].type}} --container-format=bare {{microcloud_guest_images[item].name}} < /home/stack/{{microcloud_guest_images[item].name}}.{{microcloud_guest_images[item].type}}
      ignore_errors: true
      when: deploy_browbeat and (deploy_scenario != 2 and deploy_scenario != 3)
      with_items: "{{ microcloud_guest_images }}"

    - name: (CephStorage) Upload raw image into cloud
      shell: |
        . /home/stack/overcloudrc
        openstack image create --public --disk-format=raw --container-format=bare {{microcloud_guest_images[item].name}} < /home/stack/{{microcloud_guest_images[item].name}}.raw
      ignore_errors: true
      when: deploy_browbeat and (deploy_scenario == 2 or deploy_scenario == 3)
      with_items: "{{ microcloud_guest_images }}"
    # End Image Upload

    - name: Create Overcloud security group
      shell: |
        . /home/stack/overcloudrc
        openstack security group create {{security_group_name}}
        openstack security group rule create --protocol icmp {{security_group_name}}
        openstack security group rule create --protocol tcp --dst-port 22:22 --remote-ip 0.0.0.0/0 {{security_group_name}}
      when: create_security_group

    - name: Create Overcloud keypair
      shell: |
        . /home/stack/overcloudrc
        openstack keypair create {{keypair_name}} > /home/stack/{{keypair_name}}.pem
        chmod 0600 /home/stack/{{keypair_name}}.pem
      when: create_keypair

    - name: Create private and public external networking
      shell: |
        . /home/stack/overcloudrc
        neutron net-create {{private_network_name}} --shared
        neutron subnet-create --name {{private_network_name}} {{private_network_name}} {{private_subnet}}
        neutron subnet-update {{private_network_name}} --dns-nameservers list=true {{dns_server}}
        neutron net-create {{public_network_name}} --shared --router:external --provider:network_type vlan --provider:physical_network datacentre --provider:segmentation_id {{external_vlan}}
        neutron subnet-create --disable-dhcp --gateway {{public_gateway}} --allocation-pool start={{public_allocation_start}},end={{public_allocation_end}}  browbeat_public {{public_subnet}}
        neutron router-create {{router_name}}
        neutron router-gateway-set {{router_name}} {{public_network_name}}
        neutron router-interface-add {{router_name}} {{private_network_name}}
      when: create_networks

    - name: Get private network - {{private_network_name}} UUID
      shell: |
        . /home/stack/overcloudrc
        openstack network list | grep "{{private_network_name}}" | awk '{print $2}'
      register: private_network_uuid
      when: create_networks and browbeat_workload_guests

    - name: Route external traffic from Undercloud
      become: true
      shell: |
        iptables -t nat -A POSTROUTING -o {{external_undercloud_interface}}  -j MASQUERADE
        iptables -A FORWARD -i {{external_undercloud_interface}} -o {{external_vlan_device}} -m state --state RELATED,ESTABLISHED -j ACCEPT
        iptables -A FORWARD -i {{external_vlan_device}} -o {{external_undercloud_interface}} -j ACCEPT
      when: route_external_traffic_from_undercloud

    - name: Configure Browbeat workload install vars
      replace:
        path: /home/stack/browbeat/ansible/install/group_vars/all.yml
        regexp: "{{item.regexp}}"
        replace: "{{item.replace}}"
      with_items:
        - regexp: "install_browbeat_workloads:.*"
          replace: "install_browbeat_workloads: true"
        - regexp: "pbench_internal_url:.*"
          replace: "pbench_internal_url: {{pbench_internal_url}}"
        - regexp: "browbeat_network:.*"
          replace: "browbeat_network: {{private_network_uuid.stdout}}"
      when: deploy_browbeat and browbeat_workload_guests

    - name: Install Browbeat
      shell: |
        cd /home/stack/browbeat/ansible
        { time ansible-playbook -i hosts install/browbeat.yml 2>&1 | tee -a /home/stack/log/104-browbeat-install.log ; } 2>> /home/stack/log/104-browbeat-install.log
      when: deploy_browbeat

    - name: Browbeat collect metadata
      shell: |
        cd /home/stack/browbeat/ansible
        { time ansible-playbook -i hosts gather/site.yml 2>&1 | tee -a /home/stack/log/105-browbeat-gather.log ; } 2>> /home/stack/log/105-browbeat-gather.log
      when: deploy_browbeat and browbeat_collect_metadata

    - name: Adjust nova allocation ratios
      shell: |
        cd /home/stack/browbeat/ansible
        { time ansible-playbook -i hosts browbeat/adjust-nova-allocation.yml -e "cpu_allocation_ratio={{adjust_nova_allocation['cpu_allocation_ratio']}} ram_allocation_ratio={{adjust_nova_allocation['ram_allocation_ratio']}} disk_allocation_ratio={{adjust_nova_allocation['disk_allocation_ratio']}} restart_nova=true" 2>&1 | tee -a /home/stack/log/201-adjust-nova-allocation.log ; } 2>> /home/stack/log/201-adjust-nova-allocation.log
      when: deploy_browbeat and adjust_nova_allocation['enabled']

    - name: Update Microcode
      shell: |
        cd /home/stack/browbeat/ansible
        { time ansible-playbook -i hosts browbeat/adjust-microcode.yml -e 'get_url_base={{microcode_url}}' 2>&1 | tee -a /home/stack/log/202-microcode-update.log ; } 2>> /home/stack/log/202-microcode-update.log
      when: deploy_browbeat and update_microcode

    - name: Adjust Security
      shell: |
        cd /home/stack/browbeat/ansible
        { time ansible-playbook -i hosts browbeat/adjust-security.yml -e 'security={{adjust_security['security']}}' 2>&1 | tee -a /home/stack/log/203-security-update.log ; } 2>> /home/stack/log/203-security-update.log
      when: deploy_browbeat and adjust_security['enabled']

    # Reorganize/refactor Playbook:
    # * (WIP) Split into roles
    # * Deploy from scratch playbook
    # * Rebuild overcloud playbook (Using any overcloud deployment scenario)
    # Healthcheck
    #  * Get Token
    #  * Add Network
    #  * Boot Instance
    #  * Ping Instance
    #  * Delete Instance, Network
    # Run Browbeat
    # Bugs/Thoughts
    # * Capture Memory usage?
    # * Auto install: sysstat, strace
    # * Fail if containers are not pulled down (missing containers)
    # * Capture logs from each deployment attempt into local folder?
